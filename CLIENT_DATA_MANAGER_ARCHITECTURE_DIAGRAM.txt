================================================================================
  CLIENTDATAMANAGER - ARCHITECTURE DIAGRAM
================================================================================

1. SYSTEM CONTEXT - Federated Learning Pipeline
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│                     FEDERATED LEARNING SYSTEM                              │
│                                                                             │
│  ┌──────────────┐      ┌──────────────────────┐      ┌────────────────┐   │
│  │   Dataset    │      │ Data Distributor    │      │ ExperimentConfig│  │
│  └──────┬───────┘      └────────┬─────────────┘      └────────┬────────┘   │
│         │                      │                               │            │
│         └──────────────────────┼───────────────────────────────┘            │
│                                │                                            │
│                                v                                            │
│                    ┌───────────────────────┐                                │
│                    │ Client Partition      │                                │
│                    │ (DataFrame with       │                                │
│                    │  filename + Target)   │                                │
│                    └───────────┬───────────┘                                │
│                                │                                            │
│                                v                                            │
│        ╔═════════════════════════════════════════╗                          │
│        ║   CLIENTDATAMANAGER                    ║                          │
│        ║ (This Component)                       ║                          │
│        ║                                        ║                          │
│        ║  ┌──────────────────────────────────┐ ║                          │
│        ║  │ create_dataloaders_for_partition│ ║                          │
│        ║  └──────────────────────────────────┘ ║                          │
│        ╚═════════════════════════════════════════╝                          │
│                                │                                            │
│                                v                                            │
│                    ┌───────────────────────┐                                │
│                    │ (train_loader,        │                                │
│                    │  val_loader)          │                                │
│                    └───────────┬───────────┘                                │
│                                │                                            │
│                                v                                            │
│                    ┌───────────────────────┐                                │
│                    │ Flower Client         │                                │
│                    │ (fit & evaluate)      │                                │
│                    └───────────┬───────────┘                                │
│                                │                                            │
│                                v                                            │
│                    ┌───────────────────────┐                                │
│                    │ Federated Server      │                                │
│                    │ (aggregation)         │                                │
│                    └───────────────────────┘                                │
│                                                                             │
└─────────────────────────────────────────────────────────────────────────────┘


2. CLIENTDATAMANAGER - INTERNAL ARCHITECTURE
================================================================================

┌──────────────────────────────────────────────────────────────────────────────┐
│                         ClientDataManager                                    │
│                                                                              │
│  CONSTRUCTOR: __init__()                                                    │
│  ┌────────────────────────────────────────────────────────────────────┐    │
│  │ Inputs:                                                            │    │
│  │  • image_dir: Union[str, Path]                                    │    │
│  │  • constants: SystemConstants                                     │    │
│  │  • config: ExperimentConfig                                       │    │
│  │  • logger: Optional[logging.Logger]                               │    │
│  │                                                                   │    │
│  │ Processing:                                                       │    │
│  │  1. Validate image_dir exists                                    │    │
│  │  2. Create TransformBuilder ONCE (expensive operation)           │    │
│  │  3. Store dependencies                                           │    │
│  │                                                                   │    │
│  │ State Created:                                                   │    │
│  │  • self.image_dir                                                │    │
│  │  • self.constants                                                │    │
│  │  • self.config                                                   │    │
│  │  • self.logger                                                   │    │
│  │  • self.transform_builder ← TransformBuilder (reusable)          │    │
│  └────────────────────────────────────────────────────────────────────┘    │
│                                                                              │
│  PUBLIC METHOD: create_dataloaders_for_partition()                          │
│  ┌────────────────────────────────────────────────────────────────────┐    │
│  │ Input: partition_df: pd.DataFrame, validation_split: Optional[float]   │
│  │                                                                   │    │
│  │ Step 1: VALIDATE INPUT                                           │    │
│  │  ├─ Check partition_df not empty                                 │    │
│  │  └─ Check required columns exist                                 │    │
│  │                                                                   │    │
│  │ Step 2: SPLIT PARTITION                                          │    │
│  │  └─ Call _split_partition() → (train_df, val_df)                │    │
│  │      ├─ Attempts stratified split                                │    │
│  │      ├─ Fallback to random if needed                             │    │
│  │      └─ Reset indices                                            │    │
│  │                                                                   │    │
│  │ Step 3: BUILD TRANSFORMS                                         │    │
│  │  ├─ train_transform ← transform_builder.build_training_transforms()   │
│  │  │                     (with augmentation)                        │    │
│  │  └─ val_transform ← transform_builder.build_validation_transforms()   │
│  │                     (without augmentation)                        │    │
│  │                                                                   │    │
│  │ Step 4: CREATE DATASETS                                          │    │
│  │  ├─ train_dataset ← CustomImageDataset(train_df, train_transform)      │
│  │  └─ val_dataset ← CustomImageDataset(val_df, val_transform)            │
│  │                                                                   │    │
│  │ Step 5: CREATE DATALOADERS                                       │    │
│  │  ├─ train_loader ← DataLoader(train_dataset, shuffle=True)       │    │
│  │  │                 (num_workers=0, drop_last=True)               │    │
│  │  └─ val_loader ← DataLoader(val_dataset, shuffle=False)          │    │
│  │                 (num_workers=0, drop_last=False)                 │    │
│  │                                                                   │    │
│  │ Return: (train_loader, val_loader)                               │    │
│  └────────────────────────────────────────────────────────────────────┘    │
│                                                                              │
│  PRIVATE METHOD: _split_partition()                                         │
│  ┌────────────────────────────────────────────────────────────────────┐    │
│  │ Input: partition_df: pd.DataFrame, validation_split: float        │    │
│  │                                                                   │    │
│  │ Logic:                                                           │    │
│  │  1. Try stratified split by Target column                        │    │
│  │     └─ Preserves class distribution                              │    │
│  │                                                                   │    │
│  │  2. On failure, catch (ValueError, TypeError)                    │    │
│  │     └─ Fallback to random split                                  │    │
│  │        (happens with <2 per class or other issues)               │    │
│  │                                                                   │    │
│  │  3. Reset indices for consistency                                │    │
│  │                                                                   │    │
│  │  Return: (train_df, val_df)                                      │    │
│  └────────────────────────────────────────────────────────────────────┘    │
│                                                                              │
└──────────────────────────────────────────────────────────────────────────────┘


3. DEPENDENCY INJECTION ARCHITECTURE
================================================================================

                        ClientDataManager
                                │
                ┌───────────────┼───────────────┬──────────────┐
                │               │               │              │
                v               v               v              v
        image_dir (Path)  SystemConstants  ExperimentConfig  Logger
                                │               │
                    ┌───────────┘               │
                    v                           v
            TransformBuilder           ExperimentConfig
            (created once)             (all parameters)
                │                            │
        ┌───────┴────────┐               ┌───┼───┬─────────┐
        v                v               v   v   v         v
    training_           validation_   batch_ augm. pin_  validate_
    transforms          transforms   size   strength memory images


4. DATA TRANSFORMATION PIPELINE
================================================================================

┌─ PARTITION ──────────────────────────────────────────────────────────────────┐
│ filename    Target                                                           │
│ img001.png  0 (Normal)                                                       │
│ img002.png  1 (Pneumonia)                                                    │
│ img003.png  0 (Normal)                                                       │
│ ... (500 samples total)                                                      │
└─ PARTITION ──────────────────────────────────────────────────────────────────┘
                                │
                                v
          ┌─────────────────────────────────────┐
          │    _split_partition()               │
          │                                     │
          │ Stratified by Target column         │
          │ 80% train (400), 20% val (100)     │
          └─────────────────────────────────────┘
                        │
            ┌───────────┴───────────┐
            v                       v
    ┌───────────────┐      ┌───────────────┐
    │ Train DF      │      │ Val DF        │
    │ 400 samples   │      │ 100 samples   │
    │ Mixed labels  │      │ Balanced      │
    └───────────────┘      └───────────────┘
            │                       │
            v                       v
    ┌──────────────────┐   ┌──────────────────────┐
    │ Training         │   │ Validation           │
    │ Transforms:      │   │ Transforms:          │
    │                  │   │                      │
    │ • Resize crop    │   │ • Simple resize      │
    │ • Random flip    │   │ • Center crop        │
    │ • Rotation (15°) │   │ • No augmentation    │
    │ • Color jitter   │   │ • Same normalization │
    │ • Normalization  │   │                      │
    └──────────────────┘   └──────────────────────┘
            │                       │
            v                       v
    ┌────────────────────────────────────────┐
    │ CustomImageDataset (Train)             │
    │  • Loads images from image_dir         │
    │  • Applies training transforms         │
    │  • 400 samples × transforms            │
    └────────────────────────────────────────┘
            │
            v
    ┌────────────────────────────────────────┐
    │ DataLoader (Train)                     │
    │  • Batch size: 128                     │
    │  • Shuffle: True                       │
    │  • num_workers: 0                      │
    │  • Result: 4 batches of ~100 images   │
    └────────────────────────────────────────┘
            │
            v
    ┌────────────────────────────────────────┐
    │ Training Loop (Flower Client)          │
    │  for images, labels in train_loader:   │
    │      # Forward, backward, optimize     │
    └────────────────────────────────────────┘

    [Same flow for Validation]


5. CLASS RESPONSIBILITY MATRIX
================================================================================

Component                 Responsibility
─────────────────────────────────────────────────────────────────────────────
ClientDataManager         Create DataLoaders from partitions
                          └─ Split data into train/val
                          └─ Create transforms (via builder)
                          └─ Create datasets (via CustomImageDataset)
                          └─ Create loaders (PyTorch)

TransformBuilder          Build augmentation pipelines
                          └─ Training: with augmentation
                          └─ Validation: without augmentation
                          └─ Apply preprocessing

CustomImageDataset        Load images and apply transforms
                          └─ Validate images exist
                          └─ Load from disk
                          └─ Apply transforms
                          └─ Return (image, label) tensors

DataLoader                Batch and shuffle samples
                          └─ Collate batches
                          └─ Handle workers
                          └─ Yield (images, labels)


6. ERROR HANDLING FLOW
================================================================================

┌─ INITIALIZE ─────────────────────────────────────────────────────────────────┐
│ __init__(image_dir, constants, config, logger)                              │
│                                                                              │
│ ├─ Image directory exists?                                                  │
│ │  NO ──────────────────────────→ ValueError("Image directory not found")    │
│ │  YES ↓                                                                      │
│ │                                                                            │
│ ├─ Image directory is directory?                                            │
│ │  NO ──────────────────────────→ ValueError("not a directory")             │
│ │  YES ↓                                                                      │
│ │                                                                            │
│ └─ Create TransformBuilder                                                  │
│    SUCCESS ─→ Manager initialized, ready to use                             │
└─────────────────────────────────────────────────────────────────────────────┘

┌─ CREATE DATALOADERS ──────────────────────────────────────────────────────────┐
│ create_dataloaders_for_partition(partition_df, validation_split)            │
│                                                                              │
│ ├─ Partition empty?                                                         │
│ │  YES ──────────────────────────→ ValueError("cannot be empty")            │
│ │  NO ↓                                                                       │
│ │                                                                            │
│ ├─ Required columns exist?                                                  │
│ │  NO ──────────────────────────→ ValueError("Missing columns")             │
│ │  YES ↓                                                                      │
│ │                                                                            │
│ ├─ Split partition (stratified)                                             │
│ │  ├─ Stratification works?                                                 │
│ │  │  NO ──→ Log debug, fallback to random split                            │
│ │  │  YES ──→ Use stratified split                                          │
│ │  └─ Reset indices                                                         │
│ │                                                                            │
│ ├─ Create datasets                                                          │
│ │  EXCEPTION ────────────────────→ RuntimeError("Dataset creation failed")   │
│ │  SUCCESS ↓                                                                 │
│ │                                                                            │
│ └─ Create DataLoaders                                                       │
│    SUCCESS ─→ Return (train_loader, val_loader)                             │
└─────────────────────────────────────────────────────────────────────────────┘


7. CONFIGURATION FLOW
================================================================================

ExperimentConfig
  │
  ├─ batch_size ────────────────→ DataLoader(batch_size=...)
  ├─ validation_split ──────────→ _split_partition(test_size=...)
  ├─ augmentation_strength ─────→ TransformBuilder.build_training_transforms(...)
  ├─ use_custom_preprocessing ──→ TransformBuilder (X-ray preprocessing)
  ├─ color_mode ────────────────→ CustomImageDataset(color_mode=...)
  ├─ validate_images_on_init ───→ CustomImageDataset(validate_images=...)
  ├─ pin_memory ────────────────→ DataLoader(pin_memory=...)
  └─ seed ──────────────────────→ train_test_split(random_state=...)


8. INTEGRATION WITH FLOWER CLIENT
================================================================================

┌─────────────────────────────────────────────────────────────────────────────┐
│ Flower Client Implementation                                                │
│                                                                             │
│  class PneumoniaFlowerClient:                                              │
│      def __init__(self, client_id, partition_df, config):                 │
│          # Create manager ONCE (expensive)                                │
│          self.data_manager = ClientDataManager(                            │
│              image_dir=Path(f'./federated_data/{client_id}'),             │
│              constants=SystemConstants(),                                 │
│              config=config                                                │
│          )                                                                │
│                                                                           │
│          # Create DataLoaders ONCE (reuse each round)                    │
│          self.train_loader, self.val_loader = \                          │
│              self.data_manager.create_dataloaders_for_partition(         │
│                  partition_df                                             │
│              )                                                            │
│                                                                           │
│          self.model = load_pretrained_model()                            │
│                                                                           │
│      def fit(self, parameters, config):                                  │
│          # Use DataLoader created in __init__                            │
│          for epoch in range(config.local_epochs):                        │
│              for images, labels in self.train_loader:                   │
│                  # Train step                                            │
│                  outputs = self.model(images)                            │
│                  loss = criterion(outputs, labels)                       │
│                  loss.backward()                                         │
│                  optimizer.step()                                        │
│                                                                           │
│      def evaluate(self, parameters, config):                             │
│          # Use DataLoader created in __init__                            │
│          for images, labels in self.val_loader:                         │
│              # Evaluate step                                             │
│              outputs = self.model(images)                                │
│              loss = criterion(outputs, labels)                           │
│              metrics.update(outputs, labels)                             │
│                                                                           │
│          return evaluate_metrics()                                        │
│                                                                           │
└─────────────────────────────────────────────────────────────────────────────┘


================================================================================
  END OF ARCHITECTURE DIAGRAM
================================================================================
