@startuml Data Flow
!theme plain
title Training Metrics Data Flow
skinparam linetype ortho
skinparam Nodesep 100
skinparam Ranksep 120
' Data stores
database "PostgreSQL" as DB {
    collections "runs" as RunsTable
    collections "run_metrics" as MetricsTable
}

' Processes
rectangle "Training Process" {
    usecase "Create Run" as CreateRun
    usecase "Train Epoch" as TrainEpoch
    usecase "Collect Metrics" as CollectMetrics
    usecase "Persist Metrics" as PersistMetrics
}

rectangle "API Process" {
    usecase "Query Metrics" as QueryMetrics
    usecase "Transform Data" as TransformData
}

' External entities
actor "Frontend\nApplication" as Frontend
actor "Training\nCallback" as Callback

' Data flows - Training
Callback --> CreateRun: trigger
CreateRun --> RunsTable: INSERT\n{training_mode,\nstatus, start_time}
RunsTable --> CreateRun: run_id

CreateRun --> Frontend: WebSocket\n{type: "training_start",\nrun_id: 123}

Callback --> TrainEpoch: each epoch
TrainEpoch --> CollectMetrics: epoch_metrics\n{loss, accuracy,\nprecision, recall}

CollectMetrics --> Frontend: WebSocket\n{type: "epoch_end",\nmetrics: {...}}

CollectMetrics --> PersistMetrics: all_metrics\n[{metric_name,\nvalue, step}]

PersistMetrics --> MetricsTable: BULK INSERT\n~500 rows\n(50 epochs × 10 metrics)

PersistMetrics --> Frontend: WebSocket\n{type: "training_end",\nrun_id: 123,\nstatus: "completed"}

' Data flows - Retrieval
Frontend --> QueryMetrics: HTTP GET\n/api/runs/123/metrics

QueryMetrics --> RunsTable: SELECT *\nWHERE id = 123
RunsTable --> QueryMetrics: run_record

QueryMetrics --> MetricsTable: SELECT *\nWHERE run_id = 123\nORDER BY step
MetricsTable --> QueryMetrics: metric_records[]

QueryMetrics --> TransformData: raw_metrics

TransformData --> Frontend: HTTP 200\n{final_metrics: {...},\ntraining_history: [...],\nmetadata: {...}}

note right of CreateRun
  **Run Creation:**
  - Timestamp: NOW()
  - Status: "in_progress"
  - Returns: run_id
end note

note right of CollectMetrics
  **Metrics per Epoch:**
  - train_loss, val_loss
  - train_acc, val_acc
  - val_precision
  - val_recall
  - val_f1
  - val_auroc
  - learning_rate
  - global_step
end note

note right of PersistMetrics
  **Database Format:**
  run_id | metric_name  | value | step
  -------|--------------|-------|-----
  123    | val_loss     | 0.25  | 0
  123    | val_accuracy | 0.85  | 0
  123    | val_loss     | 0.20  | 1
  ...
end note

note right of TransformData
  **Transformation:**

  DB Format (rows):
  [{metric_name, value, step}]

  ↓ Group by epoch ↓

  Frontend Format (nested):
  {
    final_metrics: {...},
    training_history: [
      {epoch: 0, train_loss: 0.5, ...}
    ],
    metadata: {...}
  }
end note

@enduml
