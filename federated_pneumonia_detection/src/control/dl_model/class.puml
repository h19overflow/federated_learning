@startuml
skinparam linetype ortho
package "Deep Learning Model Components" {

  class CustomImageDataset {
    -logger: Logger
    -constants: SystemConstants
    -transform: Optional[Callable]
    -color_mode: str
    -image_dir: Path
    -filenames: np.ndarray
    -labels: np.ndarray
    -valid_indices: np.ndarray
    --
    +__init__(dataframe, image_dir, constants, transform, color_mode, validate_images)
    +__len__(): int
    +__getitem__(idx): Tuple[Tensor, Tensor]
    +get_class_distribution(): dict
    +get_sample_info(idx): dict
    +validate_all_images(): Tuple[int, int, list]
    +get_memory_usage_estimate(): dict
    --
    -_validate_inputs()
    -_validate_image_files(): np.ndarray
    -_load_image(filename): Image
  }

  class ResNetWithCustomHead {
    -constants: SystemConstants
    -config: ExperimentConfig
    -logger: Logger
    -num_classes: int
    -dropout_rate: float
    -fine_tune_layers_count: int
    -base_model_weights: ResNet50_Weights
    -features: Sequential
    -classifier: Sequential
    -backbone_layers: list
    --
    +__init__(constants, config, base_model_weights, num_classes, dropout_rate, fine_tune_layers_count, custom_head_sizes)
    +forward(x): Tensor
    +get_model_info(): dict
    +freeze_backbone()
    +unfreeze_backbone()
    +set_dropout_rate(new_rate)
    +get_feature_maps(x, layer_name): Tensor
    --
    -_validate_parameters()
    -_create_backbone()
    -_create_classifier_head(custom_head_sizes)
    -_configure_fine_tuning()
    -_unfreeze_last_n_layers(n_layers)
    -_unfreeze_first_n_layers(n_layers)
  }

  class XRayDataModule {
    -constants: SystemConstants
    -config: ExperimentConfig
    -train_df: DataFrame
    -val_df: DataFrame
    -test_df: Optional[DataFrame]
    -image_dir: Path
    -color_mode: str
    -transform_builder: TransformBuilder
    -train_dataset: Optional[CustomImageDataset]
    -val_dataset: Optional[CustomImageDataset]
    -test_dataset: Optional[CustomImageDataset]
    -pin_memory: bool
    -persistent_workers: bool
    -prefetch_factor: int
    -validate_images_on_init: bool
    -custom_preprocessing_config: dict
    --
    +__init__(train_df, val_df, constants, config, image_dir, test_df, color_mode, pin_memory, persistent_workers, prefetch_factor, validate_images_on_init, custom_preprocessing_config)
    +setup(stage): void
    +train_dataloader(): DataLoader
    +val_dataloader(): DataLoader
    +test_dataloader(): Optional[DataLoader]
    +predict_dataloader(): DataLoader
    +get_data_statistics(): Dict[str, Any]
    +validate_all_images(): Dict[str, Any]
    +get_sample_batch(dataset_type, batch_size): Dict[str, Tensor]
    +teardown(stage): void
    +state_dict(): Dict[str, Any]
    +load_state_dict(state_dict): void
    --
    -_validate_inputs()
    -_create_dataset(dataframe, transforms, dataset_type): CustomImageDataset
    -_create_training_transforms()
    -_create_validation_transforms()
    -_worker_init_fn(worker_id)
  }

  class LitResNet {
    -constants: SystemConstants
    -config: ExperimentConfig
    -model: ResNetWithCustomHead
    -num_classes: int
    -monitor_metric: str
    -class_weights_tensor: Optional[Tensor]
    -loss_fn: nn.Module
    -train_accuracy: torchmetrics.Accuracy
    -train_f1: torchmetrics.F1Score
    -val_accuracy: torchmetrics.Accuracy
    -val_precision: torchmetrics.Precision
    -val_recall: torchmetrics.Recall
    -val_f1: torchmetrics.F1Score
    -val_auroc: torchmetrics.AUROC
    -test_accuracy: torchmetrics.Accuracy
    -test_precision: torchmetrics.Precision
    -test_recall: torchmetrics.Recall
    -test_f1: torchmetrics.F1Score
    -test_auroc: torchmetrics.AUROC
    --
    +__init__(constants, config, base_model_weights, class_weights_tensor, num_classes, monitor_metric)
    +forward(x): Tensor
    +training_step(batch, batch_idx): Tensor
    +validation_step(batch, batch_idx): Tensor
    +test_step(batch, batch_idx): Tensor
    +predict_step(batch, batch_idx): Tensor
    +configure_optimizers(): Dict[str, Any]
    +on_train_epoch_end(): void
    +on_validation_epoch_end(): void
    +get_model_summary(): Dict[str, Any]
    +freeze_backbone(): void
    +unfreeze_backbone(): void
    +set_fine_tuning_mode(enabled): void
    +get_feature_maps(x, layer_name): Tensor
    +compute_class_weights(train_dataloader): Tensor
    --
    -_validate_config()
    -_setup_metrics()
    -_setup_loss_function()
    -_calculate_loss(logits, targets): Tensor
    -_get_predictions(logits): Tensor
    -_prepare_targets_for_metrics(targets): Tensor
  }

}

' Inheritance relationships
CustomImageDataset --|> Dataset : extends
XRayDataModule --|> LightningDataModule : extends
LitResNet --|> LightningModule : extends

' Composition relationships
XRayDataModule *-- CustomImageDataset : creates/manages
LitResNet *-- ResNetWithCustomHead : contains
XRayDataModule *-- TransformBuilder : uses



' Data flow
XRayDataModule --> LitResNet : provides DataLoaders

note top of CustomImageDataset : Handles X-ray image loading\nwith robust error handling\nand memory estimation
note top of ResNetWithCustomHead : ResNet50 V2 backbone\nwith configurable custom head\nand fine-tuning capabilities
note top of XRayDataModule : PyTorch Lightning DataModule\nfor comprehensive data management\nand preprocessing
note top of LitResNet : Lightning module with comprehensive\nmetrics tracking and optimization\nfor pneumonia classification

@enduml
