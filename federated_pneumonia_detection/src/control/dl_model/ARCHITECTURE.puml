@startuml dl_model_architecture

title Centralized Training Pipeline Architecture\n(dl_model package)

skinparam packageStyle rectangle
skinparam linetype ortho
skinparam nodesep 120
skinparam ranksep 120

package "Main Orchestrator" <<Frame>> #E8F5E9 {
  class CentralizedTrainer {
    ==Main Methods==
    + train(source_path, experiment_name)
    + get_training_status()
    --Private Methods--
    - _prepare_dataset()
    - _create_data_module()
    - _build_model_and_callbacks()
    - _build_trainer()
    - _collect_training_results()
    ==Workflow==
    1. Extract & validate data
    2. Prepare datasets
    3. Create DataModule
    4. Build model + callbacks
    5. Create trainer
    6. Execute training
    7. Collect results
  }
}

package "utils/data - Data Handling" <<Frame>> #E3F2FD {
  class DataSourceExtractor {
    ==Main Methods==
    + extract_and_validate()
    + validate_contents()
    + cleanup()
    ==Responsibilities==
    • Extract ZIP archives
    • Validate directories
    • Find CSV & images
    • Return paths
  }

  class MetricsFilePersister {
    ==Main Methods==
    + save_metrics()
    ==Outputs==
    • JSON (full metrics)
    • CSV (epoch data)
    • Metadata JSON
  }

  class MetricsWebSocketSender {
    ==Main Methods==
    + send_epoch_end()
    + send_epoch_start()
    + send_status()
    + send_error()
    ==Features==
    • Real-time streaming
    • Async WebSocket
    • Graceful failures
  }
}

package "utils/model - Model Components" <<Frame>> #FFF3E0 {
  class XRayDataModule {
    ==Main Methods==
    + setup(stage)
    + train_dataloader()
    + val_dataloader()
    + test_dataloader()
    ==Responsibilities==
    • Create datasets
    • Apply transforms
    • Manage DataLoaders
    • Handle augmentation
  }

  class LitResNet {
    ==Main Methods==
    + forward()
    + training_step()
    + validation_step()
    + configure_optimizers()
    ==Features==
    • ResNet50 backbone
    • Class-weighted loss
    • Comprehensive metrics
    • LR scheduling
  }

  class TrainingCallbacks {
    ==Factory Functions==
    + prepare_trainer_and_callbacks_pl()
    + create_trainer_from_config()
    + compute_class_weights_for_pl()
    ==Creates==
    • ModelCheckpoint
    • EarlyStopping
    • LearningRateMonitor
    • MetricsCollector
    • Custom callbacks
  }

  class MetricsCollectorCallback {
    ==Main Methods==
    + on_train_epoch_end()
    + on_validation_epoch_end()
    + on_train_end()
    + get_metrics_history()
    ==Backends==
    • File (JSON/CSV)
    • Database (optional)
    • WebSocket (real-time)
  }
}

' Main workflow connections
CentralizedTrainer ..> DataSourceExtractor : "1. Extract & Validate"
CentralizedTrainer ..> XRayDataModule : "2. Create DataModule"
CentralizedTrainer ..> LitResNet : "3. Build Model"
CentralizedTrainer ..> TrainingCallbacks : "4. Setup Callbacks"

' Data flow
DataSourceExtractor --> CentralizedTrainer : image_dir, csv_path
XRayDataModule --> LitResNet : batches
TrainingCallbacks ..> MetricsCollectorCallback : creates

' Metrics flow
MetricsCollectorCallback ..> MetricsFilePersister : persists
MetricsCollectorCallback ..> MetricsWebSocketSender : streams
MetricsCollectorCallback --> CentralizedTrainer : metrics_history

' Dependency relationships
XRayDataModule -[hidden]right-> LitResNet
LitResNet -[hidden]right-> TrainingCallbacks
DataSourceExtractor -[hidden]right-> MetricsFilePersister

note bottom of CentralizedTrainer
  **Entry Point**: Orchestrates entire workflow
  **Input**: ZIP file or directory
  **Output**: Trained model + metrics
end note

note bottom of MetricsCollectorCallback
  **Collects** all training metrics
  **Persists** to 3 backends simultaneously
  **Tracks** best model performance
end note

legend right
  |= Symbol |= Meaning |
  | ..> | Uses/Depends on |
  | --> | Returns/Provides |
  | Package Colors |
  | <#E8F5E9> Main Orchestrator |
  | <#E3F2FD> Data Handling |
  | <#FFF3E0> Model Components |
endlegend

@enduml
